{"hash":"c708ae9eb0f5b53651f182078a0bc8896a37dfed","data":{"tag":{"title":"javascript","belongsTo":{"edges":[{"node":{"title":"Understanding JavaScript promise","path":"/understanding-java-script-promise/","date":"15. July 2020","timeToRead":3,"description":"In this article we are going to talk about javascript promise and take a look at some use case and best practices","content":"<p>In this article we are going to talk about javascript promise and take a look at some use case and best practices.</p>\n<p>In <a href=\"&#x27;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&#x27;\">MDN Mozilla</a> Documentation on javascript Promise, Promise is defined as  \"an object representing the eventual completion or failure of an asynchronous operation.\".</p>\n<p>What this mean in simple tone is that, Promise in javaScript is an object which can be returned when a task is going on or when a task is complete.</p>\n<p>A promise is an object which can be returned when a task is going on and when a task is not happening or done at the same time or speed with other task.</p>\n<p>Does that make sense ? Maybe not. So lets get technical with the explanation below.</p>\n<p>A promise is an object which can be returned synchronously from a asynchronous function.</p>\n<p>A promise is settled if it's not pending, that is, if it has been resolved or rejected.  A  promise continues to run as long as it have not been rejected.</p>\n<p>Three things are mainly involved in a promise, <strong>resolve()</strong>, <strong>reject()</strong> and <strong>Pending</strong>.</p>\n<p>You can look at <strong>resolve()</strong> as a onFulfilled() function which literary means it is fulfilled/completed.</p>\n<p><strong>reject()</strong> which is self explanatory, when it is rejected.</p>\n<p><strong>Pending</strong> means it have not been rejected or Fulfilled. You can look at it as seating on the fence, have not made a choice yet.</p>\n<p>Sometimes you hear/read people use <strong>resolved</strong> or <strong>settled</strong> to actually mean the same thing. Which means it have been completed and not pending.</p>\n<p>How about a little exercise to kind of show you how this works?.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hold</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">time</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token function\">hold</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n\n   <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">' waited then now this'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The <strong>hold(3000)</strong> call will hold it's chill for 3000ms which is 3 seconds and then prints out \"waited then now this\".  You use the <strong>.then()</strong> method that is used to pass handlers which can take the resolve or reject value instead of pending.</p>\n<p>A standard for promises was defined by the <a href=\"%22https://promisesaplus.com/implementations%22\">Promise/A+ specification</a> community. There are many implementations which conform to the standard, including the JavaScript standard ECMAScript promises.</p>\n<p>Here is another simple example of a promise</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'you are correct'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'you are wrong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npromise<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this belong to the resolve '</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'and this is rejected '</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>We defined a new promise that takes two parameter, resolve and reject. Then we create two variables and assign some numbers to each of them. With an <strong>if</strong> statement to check if true or not, if true the <strong>resolve()</strong> gets called else the <strong>reject()</strong> gets called.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">promise<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this belong to the resolve '</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>This get's called if the statement is true.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'and this is rejected '</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And this gets called if the statement is false.</p>\n<p>Promise in javascript is like promise in real life. You promise something and then you resolve or reject that thing or you catch an error.</p>\n<p>I hope this post helps you to understand <strong>Promise</strong> in javaScript, if so you can subscribe to my newsletter just below this post and be among the first to know when a new article is up.</p>\n<p>if you need help in your web project, or need help with any other Javascript or web development in general, i'm available on <a href=\"https://www.upwork.com/o/profiles/users/~0109de556cd2771e84/?s=1110580755057594368\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Upwork</a>.</p>\n"}},{"node":{"title":"Introduction to javaScript DOM 102","path":"/introduction-to-java-script-dom-102/","date":"13. May 2020","timeToRead":1,"description":"The javascript DOM API have a lot of interesting features, and can be used to do cool stuffs like appending a new paragraph, creating a pop-up message ","content":"<p>The javascript DOM API have a lot of interesting features, and can be used to do cool stuffs like appending a new paragraph, creating a pop-up message, resizing web content to fit the display window e.t.c.</p>\n<p>you can manipulate anything on the page using javascript <strong>Dom Api</strong></p>\n<p>lets take a look at some of the things we can do with the <strong>Dom Api</strong>.</p>\n<p>we can show all the different properties and methods attached to the document object by executing this code:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">dir</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>You can print out the domain you are working on</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">domain</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>You can access the URL</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Get title of the page</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>We can change the title of the page</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span> <span class=\"token operator\">=</span> <span class=\"token string\">'new title'</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Get the Doctype</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">doctype</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>You can get the head and body tag</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">head</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>this will print out everything in the head tag to the console. same thing with the body tag.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">all</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>this will give you an <strong>array</strong> of everything in the <strong>html</strong> element.</p>\n<p>A lot can be done using the javascript <strong>Dom Api</strong>. this is just a tiny piece of what you can do with the <strong>Dom Api</strong>.</p>\n<p>the code for this post is available on <a href=\"https://github.com/Anekenonso/domApi102\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a>.</p>\n"}},{"node":{"title":"Introduction to javaScript DOM 101","path":"/introduction-to-java-script-dom-101/","date":"3. May 2020","timeToRead":2,"description":"As a developer, creating web pages or web app, most of the time you will likely be manipulating the Document structure in one way or the other. It is usually done by using...","content":"<p>As a developer, creating web pages or web app, most of the time you will likely be manipulating the Document structure in one way or the other.</p>\n<p>It is usually done by using the Document Object Model which is DOM for short. The DOM is a set of APIs for controlling styling and HTML information that makes heavy use of the Document.</p>\n<p>Working with the Dom</p>\n<p>let's try to manipulate a HTML button using the DOM. First the HTML document.</p>\n<pre class=\"language-html\"><code class=\"language-html\"> <span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>DOM example<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n    <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">gray</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode color\">#fff</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Click the button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>click<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        button<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> doSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'you clicked on the button'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>If we save the code and open it on a web browser, and click on the button, we should get a pop-up box telling us that we clicked on the button.</p>\n<p>lets try to understand the code above. first we have the javaScript code at the button just before the clossing body tag.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"> <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     button<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> doSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'you clicked on the button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span></code></pre>\n<p>what this code does is that, first we grab the document that we want to manipulate and attach it to a variable, which is button.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>secondary we attach an event listener to the button, in this case it is the <strong>click</strong> event and a function that will be triggered once the event happen.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">button<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> doSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>the function that runs once we click on the button.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'you clicked on the button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This is just a tiny piece of what can be done with the DOM. you can check out the <a href=\"https://www.w3schools.com/js/js_htmldom_methods.asp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">w3school</a> DOM tutorial on some of the amazing things you can do with the DOM API. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla javaScript tutorial</a> also have an amazing tutorial on DOM API.</p>\n"}}]}}},"context":{}}