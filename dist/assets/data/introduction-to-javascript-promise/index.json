{"hash":"38c99ed53511d32eb9aa985df0bcec2190a7b085","data":{"post":{"title":"Introduction To Javascript promise","path":"/introduction-to-javascript-promise/","date":"15. July 2020","timeToRead":3,"tags":[{"id":"promise","title":"promise","path":"/tag/promise/"},{"id":"software","title":"software","path":"/tag/software/"},{"id":"javascript","title":"javascript","path":"/tag/javascript/"}],"description":"In this article we are going to talk about javascript promise and take a look at some use case and best practices. Apromise is an object..","content":"<p>In this article we are going to talk about javascript promise and take a look at some use case and best practices.</p>\n<p>In <a href=\"&#x27;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises&#x27;\">MDN Mozilla</a> Documentation on javascript Promise, Promise is defined as  \"an object representing the eventual completion or failure of an asynchronous operation.\".</p>\n<p>What this mean in simple tone is that, Promise in javaScript is an object which can be returned when a task is going on or when a task is complete.</p>\n<p>A promise is an object which can be returned when a task is going on and when a task is not happening or done at the same time or speed with other task.</p>\n<p>Does that make sense ? Maybe not. So lets get technical with the explanation below.</p>\n<p>A promise is an object which can be returned synchronously from a asynchronous function.</p>\n<p>A promise is settled if it's not pending, that is, if it has been resolved or rejected.  A  promise continues to run as long as it have not been rejected.</p>\n<p>Three things are mainly involved in a promise, <strong>resolve()</strong>, <strong>reject()</strong> and <strong>Pending</strong>.</p>\n<p>You can look at <strong>resolve()</strong> as a onFulfilled() function which literary means it is fulfilled/completed.</p>\n<p><strong>reject()</strong> which is self explanatory, when it is rejected.</p>\n<p><strong>Pending</strong> means it have not been rejected or Fulfilled. You can look at it as seating on the fence, have not made a choice yet.</p>\n<p>Sometimes you hear/read people use <strong>resolved</strong> or <strong>settled</strong> to actually mean the same thing. Which means it have been completed and not pending.</p>\n<p>How about a little exercise to kind of show you how this works?.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hold</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">time</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token function\">hold</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n\n   <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">' waited then now this'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The <strong>hold(3000)</strong> call will hold it's chill for 3000ms which is 3 seconds and then prints out \"waited then now this\".  You use the <strong>.then()</strong> method that is used to pass handlers which can take the resolve or reject value instead of pending.</p>\n<p>A standard for promises was defined by the <a href=\"%22https://promisesaplus.com/implementations%22\">Promise/A+ specification</a> community. There are many implementations which conform to the standard, including the JavaScript standard ECMAScript promises.</p>\n<p>Here is another simple example of a promise</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'you are correct'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'you are wrong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npromise<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this belong to the resolve '</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'and this is rejected '</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>We defined a new promise that takes two parameter, resolve and reject. Then we create two variables and assign some numbers to each of them. With an <strong>if</strong> statement to check if true or not, if true the <strong>resolve()</strong> gets called else the <strong>reject()</strong> gets called.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">promise<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this belong to the resolve '</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>This get's called if the statement is true.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'and this is rejected '</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>And this gets called if the statement is false.</p>\n<p>Promise in javascript is like promise in real life. You promise something and then you resolve or reject that thing or you catch an error.</p>\n<p>I hope this post helps you to understand <strong>Promise</strong> in javaScript, if so you can subscribe to my newsletter just below this post and be among the first to know when a new article is up.</p>\n<p>if you need help in your web project, or need help with any other Javascript or web development in general, i'm available on <a href=\"https://www.upwork.com/o/profiles/users/~0109de556cd2771e84/?s=1110580755057594368\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Upwork</a>.</p>\n","cover_image":null}},"context":{}}